#!/bin/bash
. /usr/share/porteus/porteus-functions
get_colors
. /usr/local/save-changesnew/versionquery
. /usr/local/save-changesnew/validprogram.sh
. /usr/local/save-changesnew/rntchangesfunctions

eval "$(python3 /usr/local/save-changesnew/get_exports.py)"

# END CHANGEABLE
echo $BACKEND_BACKEND
[[ "$mMODE" != "default" ]] && [[ "$mMODE" != "mc" ]] && echo incorrect mMODE && exit 
[[ "$STATPST" == "true" ]] && [[ "$ANALYTICS" == "true" ]] && { echo With STATPST cant run with ANALYTICS. for security reasons as its stored in gpg. ; echo you can modify to run both if wanted. ; } && exit
[[ "$STATPST" == "false" ]] && [[ "$backend" == "database" ]] && echo cant run database with ANALYTICS. && exit
if [ "$1" = "-v" ]; then get_vrn $1 ; elif [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "help" ] || [ "$1" = "-help" ]; then get_vrn $1; fi # If inquery tag no need to call root. pass to other function and exit.
argf=$5
if [ `whoami` != "root" ]; then #if [[ $(whoami) != "root" ]]; su -c "$0"; exit fi  if [[ $(id -u) -ne 0 ]]; then sudo "$0" "$@"; exit 0; fi
    echo "Please enter your root password below"
	if [ "$1" == "inv" ]; then argone="noarguser" ; argtwo="noarguser" ; argf="filtered" ; else argone="$1" ; argtwo="$2"  ; fi
	argthree=`whoami`
    if [ -z "$argone" ]; then argone="noarguser" ; fi
    if [ -z "$argtwo" ]; then argtwo="noarguser" ; fi
	if [ "$2" == "inv" ]; then argtwo="noarguser" ; argf="filtered" ; fi
	if [ "$3" == "inv" ]; then argf="filtered" ; fi
	#if [ "$XDG_SESSION_TYPE" = "wayland" ]; then/root/somefile\\\"quote.txt
		su - -c "/usr/local/bin/recentchanges $argone '$argtwo' $argthree '$PWD' $argf"
	#else
	#	sudo -k
	#	exec sudo "$0" $argone "$argtwo" $argthree "$PWD"
	#fi
    exit
fi
# Handle rnt inverse switching
arge=()
for item in "$@"; do if [ "$item" != "inv" ]; then arge+=("$item") ; else arge+=("") ; argf="filtered" ; fi ;done
p=${#arge[@]} ; while (( p < 5 )); do arge+="" ; ((p++)) ; done
# Handle root call
THETIME="${arge[1]}"
USR="${arge[2]}"
passdir="${arge[3]}"
if [ -z "$argf" ]; then argf="bnk"; fi #Default
export DISPLAY=:0 # for tkl and root xed featherpad
export XAUTHORITY=/home/$USR/.Xauthority
if [ "${arge[1]}" == "" ]; then THETIME="noarguser" ; fi
if [ "${arge[2]}" == "" ] || [ "${arge[3]}" == "" ]; then USR="guest" ; passdir=$PWD ; fi #Default user
if [ "${arge[2]}" == "SRC" ]; then echo "Incorrect usage please use recentchanges SRC s , s SRC or SRC" && exit 1; fi
if  ! id $USR>/dev/null 2>&1; then echo "user: $USR not found"; exit 1; fi
#Fork
if [ "${arge[0]}" == "search" ]; then
   	test -d "${passdir}" || { echo  "not a valid directory. usage recentchanges search time."; exit 1; }
   	python3 /usr/local/save-changesnew/recentchangessearch.py "${arge[0]}" "$THETIME" $USR "$passdir" $argf "$0"
   	exit
elif [ "${arge[0]}" == "query" ]; then
	python3 /usr/local/save-changesnew/query.py $pydbpst $email $USR $pydbpst $logpst $statpst
fi

THETIME="${arge[0]}" # shift for this script
if [ "${arge[0]}" == "" ]; then THETIME="noarguser" ; fi # root call
[ "$THETIME" == "SRC" ] &&{ SRCDIR=$THETIME; THETIME="${2:-noarguser}"; } # shift
[ "${arge[1]}" == "SRC" ] && SRCDIR=${arge[1]} || { [ "${arge[1]}" == "SEARCH" ] || [ "${arge[1]}" == "search" ]; } && echo "The SRC tag is for recentchanges only" && exit

# 'recentchanges'
python3 /usr/local/save-changesnew/recentchangessearch.py "${arge[0]}" "$THETIME" $USR "$passdir" $argf "$0" "rnt" "Refer to /rntfiles_MDY folder for the previous search"
exit

