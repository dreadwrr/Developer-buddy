#!/bin/bash
#                                               Developer Buddy v3.0  Rsync backup of changes folder  Porteus edition  08/30/2025
# rsync backup to /changes.bak minimal writes as the backup would already be in place. Files are logged and its accurate
# to system specs with --delete. Added drive to drive while this is fast the preferable way is to not use drive to drive
# as it freezes the file system at that point in time. But on shutdown that wait would be too long. So drive to drive provides
# a way to save on that condition. So both options are available depending on preference.
#
# Hard drive changes commit   Save files via directory method    Final version
#
# This script efficiently copies changes to a hard drive for systems with limited memory.
# it uses rsync and includes a log of all files saved. if files havent changed it simply
# doesnt copy them. Automatically skip .wh.  files and  Direct to drive save.
#
# Result saves your changes to your Changes=EXIT:  folder
#
# This is a proposed change to changes commit with directory method. All original lines are commented out to work with script
# working off of base save-changes scripts by
# Author: fanthom <fanthom@porteus.org>
. /usr/share/porteus/porteus-functions
get_colors
. /usr/local/save-changesnew/save-changesnewfnts
# Check if 'changes=EXIT' cheatcode is active and not run from rc.6:
[[ "$1" != "6" ]] && if [[ $(whoami) != "root" ]]; then yellow "Please enter root's password below:" ; su - -c "/opt/porteus-scripts/save-changesnew $USER $1" ; exit ; fi
[[ "$1" == "6" ]] && theUSER="$2" && thetgt="$4" || { theUSER="$1" ; bck="$2" ; } # Handle actual root call   
[[ -z "$2" ]] && bck=$1 && theUSER="guest"
[[ -z "$thetgt" ]] && thetgt=$BASEDIR     # <----- ie   /mnt/sda3   some root environments are null 
if ! id $theUSER >/dev/null 2>&1; then echo "user:" ${2} "not found"; exit 0 ; fi # quick user check                     #we test the target directory $1 after VARS

# Notes
# Changes commit vars   line 172          this is the main script
# developer buddy  vars         160         this runs after changes commit if BACKUP  true
#


#CHANGABLE					# As changes exit uses changes-commit turn backup on to save a backup /changes.bak/

BACKUP="true"				# Turn on backup feature of Developer buddy 3.0 to hdd on/off           this will run after changes-commit
autobackup="false"                # changes=EXIT: only ie automatic append changes-commit to call this script if false sets .. to -x
isolateBACK="true"			# default false.  
										# true you would call save-changesnew backup to refresh the backup

d2drive="true"                 # default is false   for systems with low memory save directly to drive
                                        # default is save to memory for staging purposes and convenience of modifying
                                        # ect more versatle and efficient (less writes on hd)

                                        # but systems with low memory may want to use this to avoid any potential
                                        # exceedence

d2dmdl="false"					# default false  use harddrive for temp dir for modules Not changes exit use target
mdldvc=""                        # default null. if not enough memory use this device.       ie /mnt/sda3



grubln=""                                     # default null. Point to the line number linux /boot/syslinux/vmlinuz from=/dev/nvme0n1p4 root=UUID=... to automatically update grub for graphics extramod to boot with changes
bootdvc=""		                              # default null.  if booting from another harddrive for bootloader   ie   /mnt/sdc1   porteus bootloader        or      where grub2 is installed  example /mnt/nvme0n1p8

target=$thetgt                               # change this to specify the location of porteus install this passed from root call where porteus is installed via $BASEDIR
                                                # examples      "/mnt/sda1"
                                                #                   "/dev/sda1"
                                               # avoid trailing /


#Folders to include from changes      adjust if wanted            set tsave-changesnewfntso include changes-exit default folders
IFOLDERS="bin etc home lib lib64 opt root sbin usr var"
#Folders to exclude from changes
EXCLUDE="/var/run /var/tmp share/Trash"   #default changes-exit configuration
                                            # keep original format  /var/run    is the base directory var
                                            # seperate with space            anything else other than / will be a pattern *****


#Folders to exclude from changes                                         already set to exclude changes-exit default folders

chxzm="/changes.xzm"            #Module  name  change this if you want to customize the name
                                 # retain leading / and ensure it ends in .xzm
                                 #avoid trailing / and any spaces
em="/extramod"                      #change this to save a different folder       the extramod dirtory          disabled for porteus version not required
                                                # retain leading /
                                               # avoid trailing /

cmode="gzip"                            # default nothing. uses gzip compression level balanced
                                           # xz        best compression
                                           # zstd     faster bootup
                                            # lzo      faster bootup

logSIZE=35            # Log size limit default 35 MB
                       # Will keep the original contents from when the changes.bak folder was made
                         # if limit is exceeded. Just clears out old changes to make a new log file

logSPRF="delete"           # When log size limit reached what to do default delete just delete it and create a new one
                            #       with new updated master list.
                            # delete    delete the log to save space and make a new one with new master listi
                            # psv       preserve 25% of the last changes but take into account new changes so
                            #           we are not over 25% of the log max size limit thus we grab 10-15% of the
                            #           most recent changes append new ones to reach the 25% quota
                            #
                            #           end result preserves the original format and any original master list
                            #
                            # stop      dont log anymore

mdllmt=7                             # Auto Graphics mode module merging default 5
                                                # when reached will automatically merge if mrgMODULES is set to true below
                                                # see mrgMODULES boolean
linkedLOGPRF="incr"          # default incr  new log of only changes keeps log size down
                                            # full log from creation all files and then append changes
                                            # no      dont log the linked module

# CHANGABLE BOOLEANS
linkedSTATE="false"             #This is precendence for changes:EXIT only on graphics mode. Default false
                                           # This implies that you want changes made INCLUDING deletes to another
                                           # modules in /tmp for now. We do this to prove that its working so everything
                                           # is still done the same just you have a module with deletions included in /tmp
                                           #
                                           # linked state needs all changes modules to be created together thus you should
                                           # start with one that has linkedSTATE made. A byte count of this .xzm is made
                                           # and logged into a txt file by the modules.
                                           #
                                           # This text file will tell it are those candidates for Changes:EXIT/ and where to stop
                                           # ect.
keepLINKEDMRGED="false"  # default is false so delete the old ones after merging if they are not in sync with each other
                                           # it automatically renames the old one to .bak. ****
# Non linked state options
mrgMODULES="true"           # Automatically merge changes modules if over limit value
                                        #change this to automatically merge changes.xzm modules  ( applies to Graphics mode)
                                        # see $BASEDIR/extramod for mergemodule script to merge changes modules

keepMRGED="false"       # default is false so delete the old ones after merging
# End Non linked state options

# Terminal output / feedback
FEEDBACK="false"                # default false     New version 3 feature  scrolling terminal look
                                            # show more verbose feedback from rsyncautosave ect in terminal while saving

LOGGING="true"                  # default is true change if you dont want logging



ANALYTICS="true"            # logging must be set to true       default true     or set to false to turn off too much info
                                        # if false will just output rsync changes
                                        # if it exceeded logSIZE then the original contents when the backup was made is preserved
                                        # and then a new logfile is made then rsync appends any changes during updates until
                                        # the limit is exceeded again.

                                      # If true Will give total space saved if making a complete new backup
                                        # more data in the log file and custom info by this script

                                        # extra stuff like if the log file exceeded logSIZE and a new one is made
                                        # it will list the contents of the ORIGINAL backup, the contents of the current backup
                                        # and list the file differences as well. Then rsync will continue to input changes.
                                        # you also get total MB saved if you had manually backed up the changes folder ect
                                       
ANALYTICSECT="true"			# Show more info time ect.
# End Terminal output

# Backup mode Not changes exit
ROLLBCK="false"                       # backup module after merged to be able to "rollback" by loading any single module
 			 							# A module that has been merged is saved and moved to /archive/
										# takes up more space
ROLLSUMRY="false"           # default false    Include file manifest for archives
archLMT=4                        # how many unique roll backs to keep  both _uid_ and _uid_L seperately
# END CHANGABLE
# V3 core rsync backup on save-changesnew                 See   line  419    for original changes commit script
tmp=/tmp/tmp$$ 												            	;	mtmp=/tmp/mtmp$$                    							                    
ch=/mnt/live/memory/changes 								        	;	exclfiles=/tmp/exfiles.log # spare tmp file
EXCLUDED=/tmp/save.excluded.tmp									;	UPDATE=/tmp/save.update.tmp 
QEXCL=/tmp/squashexfiles.log											;	trsyncexl=/usr/local/save-changesnew/excld.ini  #  rsync exclude Cache     cache2/*    ect     see for details
SFOLDERS=/tmp/save.sfolders.tmp										;	chc=/opt/porteus-scripts/changes-commit
oMF=/tmp/flog.log																;	USR=$theUSER  
mbyte=1048576																;	osize=0					
rname=""																			;	adtCMD=""	
sentinal=""																		;	MODULENM=""  
#booleans
rlt=""
## changes commit
DEST=""																			; 	NAME=""
MNAME=/mnt/live/memory/images/changes						; 	INAME=/mnt/live/memory/images
CHNEXIT_CONF=/etc/changes-exit.conf								; 	EXCL=/tmp/save.excl.tmp
SFILES=/tmp/save.sfiles.tmp												;	UPDATE=/tmp/save.update.tmp
LOGDIR=/home/$USR/Downloads										;	LOGFILE="save.sfiles.tmp"
SVFILES=$MNAME/home/$USR/Downloads/save.sfiles.tmp	;	EXFILES=/tmp/save.exfiles.tmp   #holds excluded file list for rsync non regex
ans=""
if [ "$LOGGING" == "false" ] && [ "$ANALYTICS" == "true" ]; then echo analystics requires logging to be true. && exit 0 ; fi
MODULENM="${chxzm%.xzm}" ; mdlnm="${MODULENM#/}" ; emfld="${em#/}"
autosave
rlt=$(sed -n 's/.*changes=\([^ ]*\).*/\1/p' /proc/cmdline)
# Graphics Not changes=EXIT:/ mode  <---
[[ -z "$rlt" ]] && initf && savex
[[ -n "$rlt" ]] && [[ ! -f /mnt/live/tmp/changes-exit ]] && [[ "$isolateBACK" == "true" ]] && initf && backup "c" && cleanup "$1" "c"
test -f /mnt/live/tmp/changes-exit || { echo "'changes=EXIT:' cheatcode is not active - exiting..."; exit; }
initf
rlt=$(sed -n 's/.*changes=EXIT:\([^ ]*\).*/\1/p' /proc/cmdline)
[[ -n "$rlt" ]] && [[ "$bck" == "backup" ]] && backup && cleanup "$1"
DEST="$(cat /mnt/live/tmp/changes-exit)"	; 	NAME="$(basename "${DEST:-}")"

if [[ "$1" != "6" ]]; then
	if [ "$ANALYTICS" == "true" ] && [ "$BACKUP" == "false" ]; then start=$(date +%s.%N); fi
	if [[ $(grep ".dat" /mnt/live/tmp/changes-exit 2>/dev/null) ]]; then
		Dest="Save.dat file"
	else
		Dest="Save folder partition"
	fi

	SDspace=$(df -BM -h --output=size,used,avail,pcent /mnt/live/memory/images/changes | tail -n1)
	read size used avail percent <<< "$SDspace"
	cyan "Checking for space in your $Dest .."
	if [[ ${percent%\%} -gt  85 ]]; then
	  echo
	  red "Warning! $Dest $percent full.  Used: $used  Free: $avail"
	  x=5
	  echo
	else
	  echo
	  green "$Dest $percent full.  Used: $used  Free: $avail"
	  echo
	fi

	# Folders to save: argument for `find' & check that they $changesexist.
    #FOLDERS="$(for x in $(grep ^/ $CHNEXIT_CONF | sed s/.//); do test -e $ch/"$x" && echo "$x"; done)" ; dycmb exldir $EXFILES
    #initf
    
	# Folders to exclude: argument for `egrep'
	#grep ^!/ $CHNEXIT_CONF | fixdir > $EXCL  #  has a ^ for egrep initf

	# only run timeout on shutdown
	if [[ "$1" = "6" ]]; then
		[[ ! $x ]] && x=3
        cyan "Your session will be saved in [1;33m$x seconds[0m"
        yellow  "Press space/enter to start doing it now or any other key to skip."
        while [[ $x -gt 0 ]]; do read -s -t1 -n1 ans && break || sleep 1; let x=x-1; done
	else
		ans=""
	fi

	if [[ "$ans" = "" ]]; then

		## Save session:
		cyan "Syncing what's left in buffers"
		sync

		# Remount aufs with 'udba=notify' flag:
		mount -o remount,udba=notify /
		cyan "Saving changes to $DEST - this may take a while..."
		cd /mnt/live/memory/changes || exit

	#NEW

		# Handle filenames with spaces.
		IFS="
		"

		#
		# file for rsync to read without regex
		#grep '^!/' $CHNEXIT_CONF | sed -e 's/^!//' > $EXFILES


		# Remove deleted files and non matching whiteouts
		for y in $(find $FOLDERS -name ".wh.*"); do
		  f="$(echo $y | sed 's@\.wh\.@@g')"
		  test -e "$MNAME/$f" && rm -rf "$MNAME/$f";

		  found="false"
		  for file in "$INAME"/*/"$f"; do [ -e "$file" ] && found="true" && break ; done
          [[ "$found" == "true" ]] || { echo "$y" | fixwh >> $EXCL; echo "$y" >> $EXCLUDED; test -e "$MNAME/$y" && rm -f "$MNAME/$y"; }
		 # test -e "$INAME/*/$f" || { echo "$y" | fixwh >> $EXCL; echo "$y" >> $EXCLUDED; test -e "$MNAME/$y" && rm -f "$MNAME/$y"; }
			           #         ^    to prevent binary operator expected on empty sym link
		done

		#  We have  EXCL  regex and        EXFILES   non regex to work with
		#
		#> $EXFILES
		#cat $EXCL | unfixwh | fixsqh > $EXCLUDED   Original 
		# New 5.0
		
        test -s $EXCL && cat $EXCL | unfixwh | fixsqh > $UPDATE && grep -Fvxf $EXFILES $UPDATE > $QEXCL ; test -s $QEXCL && cat $QEXCL >> $EXFILES && rm $QEXCL
       

		# The purpose of this routine is so we have a file with all folders to save and can use it verify with rsync log that rsync is working
		# or captured all the directories
		#
		# $EXCL will show all the .wh. files  and $SFOLDERS has all the folders can use to verify
		#
		# Create a manifest of what folders we are saving through EXCL regex
		# Copy new and modified folders -- skip excluded whiteouts and folders and create a folder manifest
		test -s "$EXCL" && { find $FOLDERS -type d | egrep -vf $EXCL || find $FOLDERS -type d; } > $SFOLDERS


		# Note changed from original  we dont need to exclude .wh. as rsync can exclude those
		#
		# Copy new and modified files -- skip excluded whiteouts and folders
		# { test -s "$EXCL" && find $FOLDERS -not -type d | egrep -vf $EXCL || find $FOLDERS -not -type d; } > $SFILES
		#

		#  This routine can clean up EXCL to work with rsync tested
		#  works. The point of this version is to not have regex for
		#  rsync so all changes are for that reason
		#
		#  sed -i -e 's/\^//' -e 's|\\\.|.|g' -e 's|\]|\]\\|g' $EXCL
		#

		#Send files to drive and exclude from list of what to exclude  ie folders files etc
		#
		# pattern '\.wh\.*'    excludes any file starting with   .wh.
		#

		#Reject old log file in session
		test -e $ch$LOGDIR/$LOGFILE && rm $ch$LOGDIR/$LOGFILE
        >$UPDATE 
		adtcmd=(--exclude '.wh.*')
		base_cmd=(rsync -aHv "${adtcmd[@]}")
		[[ -s "$EXFILES" ]] && base_cmd+=(--exclude-from=$EXFILES) ; [[ -s "$trsyncexl" ]] && base_cmd+=(--exclude-from=$trsyncexl)
		run_cmd "${base_cmd[@]}" $FOLDERS "$MNAME/" ; errblk
		end=$(date +%s.%N) ; if [ "$ANALYTICS" == "true" ] && [ "$ANALYTICSECT" == "true" ] && [ "$BACKUP" == "false" ] ; then el=$(awk "BEGIN {print $end - $start}") ; printf "Saving took %.3f seconds.\n" "$el" ; fi
		
		#Create a log
		BRAND=`date +"MDY_%m-%d-%y-TIME_%R"|tr ':' '_'`
		echo $BRAND >> $UPDATE

        cp $UPDATE $LOGDIR/$LOGFILE
		#Do include a log file in case still in session
		mv $UPDATE $MNAME$LOGDIR/$LOGFILE


		# subroutine clean out any deleted files   a ..wh..  is a file you deleted and no longer exists
		#
		# the reasoning behind this routine is to clean a drive of any ..wh.. files
		#
		#
		#find $MNAME -name ".wh.*" -exec rm -r {} \;

	#NEW END
	# ORIGINAL commented out to work with changes

		# Copy new and modified files -- skip excluded whiteouts and folders
		# { test -s "$EXCL" && find $FOLDERS -not -type d | egrep -vf $EXCL || find $FOLDERS -not -type d; } > $SFILES
		# cp -uafv --parents $(cat $SFILES) $MNAME > $UPDATE

		   #  Alternative to above to prevent exceeding ARG_MAX  ie too long of command
		   #  > $UPDATE
		   # cat $SFILES | xargs -I {} cp -aufv --parents {} $MNAME >> $UPDATE    #Can add instead of above

	# ORIGINAL END

		# Remove conflicting whiteouts
		for y in $(find $MNAME -name ".wh.*"); do
			f="$(echo $y | sed -e "s^$MNAME^^g" -e 's^\.wh\.^^g')";
			test -e "$f" && rm "$y";
		done

		# Reset IFS to default
		unset IFS
        test -e $EXCLUDED && rm $EXCLUDED
        if [[ "$BACKUP" != "true" ]]; then 
            test -e $EXCL && rm $EXCL
            #test -e $EXFILES && rm $EXFILES
            #test -e $SFOLDERS && rm $SFOLDERS
        fi
		#	green "Session saved"       ORIGINAL commented out to work with changes
		cyan "Your changes have been saved. and synced to your system"
		cyan "updates changes to hdd $DEST"
		cyan "A log file is available in Downloads"
		cyan "If you are still in session you wont see this"
		cyan "file until reboot. a copy is in /tmp"
		## End Changes commit
    else
		yellow "Skipping."
	fi
fi
## Developer buddy 3 rsync backup on  changes=EXIT:/porteus    save-changesnew
if [[ "$3" == "yes" ]]; then ans=""; fi
if [[ "$ans" = "" ]]; then
	if [[ "$BACKUP" == "true" && "$isolateBACK" = "false" ]]; then
		if [[ "$1" == "6" ]]; then # regen so independant
			cyan "Backing up on shutdown..." ; target=$4
			initf ; backup ; exit
		#else # normal execution of this script
		fi
		backup
	fi
	cleanup "$1" # Remove not shuttingdown
fi
